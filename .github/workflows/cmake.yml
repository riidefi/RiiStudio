name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_windows_x64:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: SetupRust
      uses: ATiltedTree/setup-rust@v1
      with:
        rust-version: beta
    - name: Install LLVM
      run: choco install -y llvm --version=16.0.6
      if: runner.os == 'Windows'
    - name: Install Ninja
      run: choco install -y ninja
      if: runner.os == 'Windows'
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -GNinja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DRust_CARGO_TARGET=x86_64-pc-windows-msvc -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    
    - uses: actions/upload-artifact@v2
      with:
        name: tests-binary
        path: ${{github.workspace}}/build/source/tests/${{env.BUILD_TYPE}}

    - uses: actions/upload-artifact@v2
      with:
        name: riistudio-binary
        path: ${{github.workspace}}/build/source/frontend/${{env.BUILD_TYPE}}
